#!/bin/sh

# bedpostx_mgh
# (This script was modified from FSL's bedpostx by Anastasia Yendiki)

#   Copyright (C) 2004 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 4.0 (c) 2007, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/1112.

BPDIR=`dirname $0`

if [ "x$SGE_ROOT" = "x" ] ; then
    if [ -f /usr/local/share/sge/default/common/settings.sh ] ; then
	. /usr/local/share/sge/default/common/settings.sh
    elif [ -f /usr/local/sge/default/common/settings.sh ] ; then
	. /usr/local/sge/default/common/settings.sh
    fi
fi

# Check if this is being run on PBS but isn't a job itself (AY)
if [ -d /pbs ] && [ -z $PBS_JOBID ] ; then
    dopbsjobs=1;
else
    dopbsjobs=0;
fi


Usage() {
    echo ""
    echo "Usage: bedpostx_mgh <subject directory> [options] ..."
    echo ""
    echo "expects to find bvals and bvecs in subject directory"
    echo "expects to find data and nodif_brain_mask in subject directory"
    echo "options (old syntax)"
    echo "-n (number of fibres per voxel, default 2)"
    echo "-w (ARD weight, more weight means less secondary fibres per voxel, default 1)"
    echo "-b (burnin period, default 1000)"
    echo "-j (number of jumps, default 1250)"
    echo "-s (sample every, default 25)"
    echo ""
    echo ""
    echo "ALTERNATIVELY: you can pass on xfibres options onto directly bedpostx"
    echo " For example:  bedpostx <subject directory> --noard --cnonlinear"
    echo " Type 'xfibres --help' for a list of available options "
    echo " Default options will be bedpostx default (see above), and not xfibres default."
    echo ""
    echo "Note: Use EITHER old OR new syntax."
    echo ""
    echo "This is a modified version of FSL's bedpostx that is compatible with"
    echo "the PBS queueing system running on launchpad/seychelles and can be"
    echo "used by Martinos Center users to parallelize computation."
    echo ""
    echo "This script runs the exact same algorithm as bedpostx, but it submits"
    echo "the processing for each slice as a separate PBS job. Thus, bedpostx"
    echo "and bedpostx_mgh will give you the same result, but the former will"
    echo "do it in days and the latter in hours."
    echo ""
    echo "Command line options and the structure of the input directory are the"
    echo "same as for the original bedpostx."
    echo ""
    echo "Do not submit bedpostx_mgh as a job on launchpad/seychelles. Run it"
    echo "directly at the launchpad/seychelles prompt and it will submit the"
    echo "jobs for you. Note that this will generate a large number of jobs, so"
    echo "don't launch it on more than one data set at the same time. You may"
    echo "get some PBS emails about jobs being held that you have to release -"
    echo "you can ignore these emails as the script will take care of that."
    exit 1
}

# Find FSL version (AY)
fslver=(`cat $FSLDIR/etc/fslversion | sed 's/\./ /g'`)
if [ -z ${fslver[1]} ]; then fslver[1]=0; fi
if [ -z ${fslver[2]} ]; then fslver[2]=0; fi

# The order of bedpostx_single_slice arguments has been shifting around
# in different versions of FSL
if [ ${fslver[0]} -lt 4 ]; then
    echo "Unsupported FSL version (${fslver[0]}.${fslver[1]}.${fslver[2]})"
    exit 1
else
    if [ ${fslver[0]} -eq 4 ] && [ ${fslver[1]} -eq 0 ]; then
	if [ ${fslver[2]} -lt 2 ]; then
	    argorder=400;				# Order as in FSL 4.0.0
	else
            argorder=402;				# Order as in FSL 4.0.2
	fi
    elif [ ${fslver[0]} -eq 4 ] && [ ${fslver[1]} -eq 1 ]; then
	if [ ${fslver[2]} -lt 5 ]; then
	    argorder=402;				# Order as in FSL 4.0.2
	elif [ ${fslver[2]} -lt 9 ]; then
	    argorder=415;				# Order as in FSL 4.1.5
	else
            argorder=419;				# Order as in FSL 4.1.9
	fi
    else
	argorder=419;					# Order as in FSL 4.1.9
    fi
fi

make_absolute(){
    dir=$1;
    if [ -d ${dir} ]; then
	OLDWD=`pwd`
	cd ${dir}
	dir_all=`pwd`
	cd $OLDWD
    else
	dir_all=${dir}
    fi
    echo ${dir_all}
}

[ "$1" = "" ] && Usage

#parse option arguments
nfibres=2
fudge=1
burnin=1000
njumps=1250
sampleevery=25
model=1

while [ ! -z "$1" ]
do
  if [ -d "$1" ]; then		# Allow multiple input directories (AY)
    dirlist="$dirlist $1"
  else
    case "$1" in
        -n) nfibres=$2;shift;;
        -w) fudge=$2;shift;;
        -b) burnin=$2;shift;;
        -j) njumps=$2;shift;;
        -s) sampleevery=$2;shift;;
        -model) model=$2;shift;;
        *) break;;
    esac
  fi
  shift
done
opts="--nf=$nfibres --fudge=$fudge --bi=$burnin --nj=$njumps --se=$sampleevery --model=$model"
defopts="--cnonlinear"
opts="$opts $defopts $*"

# Process multiple input directories, queue them up serially (AY)
for subjdir in $dirlist; do

subjdir=`make_absolute $subjdir`
subjdir=`echo $subjdir | sed 's/\/$/$/g'`

echo subjectdir is $subjdir

#check that all required files exist

if [ ! -d $subjdir ]; then
	echo "subject directory $1 not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvecs ]; then
	echo "${subjdir}/bvecs not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvals ]; then
	echo "${subjdir}/bvals not found"
	exit 1
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/data` -eq 0 ]; then
	echo "${subjdir}/data not found"
	exit 1
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif_brain_mask` -eq 0 ]; then
	echo "${subjdir}/nodif_brain_mask not found"
	exit 1
fi

echo Making bedpostx directory structure

mkdir -p ${subjdir}.bedpostX/
mkdir -p ${subjdir}.bedpostX/diff_slices
mkdir -p ${subjdir}.bedpostX/logs
mkdir -p ${subjdir}.bedpostX/logs/pid_${$}
mkdir -p ${subjdir}.bedpostX/xfms

mailto=`whoami`@fmrib.ox.ac.uk
echo Queuing preprocessing stages
if [ "x$mergeid" = "x" ] ; then
    preprocid=`${BPDIR}/fsl_sub_mgh -T 60 -m a -N bedpostx_pre -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir}`
else
    preprocid=`${BPDIR}/fsl_sub_mgh -j $mergeid -T 60 -m a -N bedpostx_pre -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir}`
fi

echo Queuing parallel processing stage
nslices=`${FSLDIR}/bin/fslval ${subjdir}/data dim3`
[ -f ${subjdir}.bedpostX/commands.txt ] && rm ${subjdir}.bedpostX/commands.txt
if [ "x$SGE_ROOT" = "x" ] && [ $dopbsjobs -eq 0 ]; then

# 
# Need to set off a backgrounded monitoring task
# 
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
finished=0
logdir=${subjdir}.bedpostX/logs

check() {
    if [ \$finished -eq 1 ];then
        echo "\$nfin slices processed"
    else
        nfin=0
        slice=0
        while [ "\$slice" -le $nslices ];do
            slicezp=\`\$FSLDIR/bin/zeropad \$slice 4\`
            isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_\$slicezp/dyads1\`
            if [ \$isimg -eq 1 ];then
                nfin=\$((\$nfin + 1))
            fi
                slice=\$((\$slice + 1))
        done
        if [ \$nfin -eq $nslices ] ; then
            finished=1
        fi
        echo "\$nfin slices processed"
    fi
}
exit_test() {
    isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/dyads1\`
    if [ \$isimg -eq 0 ] ; then
	echo For some reason the bedpostX process DOES NOT appear
	echo to have successfully completed. Please examine your
	echo results carefully.
    else
	echo All slices processed
    fi
}

check
n=0
while [ \$finished -eq 0 ] ; do
    sleep 10
    if [ \$n -eq 60 ] ; then
        check
        n=0
    else
        n=\$((\$n + 1))
    fi
done
exit_test
EOM
    chmod +x ${subjdir}.bedpostX/monitor
    ${subjdir}.bedpostX/monitor&
    monitorpid=$!
fi
slice=0
while [ $slice -lt $nslices ]
do
    slicezp=`$FSLDIR/bin/zeropad $slice 4`
    if [ `$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_$slicezp/dyads1` -eq 1 ];then
	echo "slice $slice has already been processed"
    else
	if [ $argorder -eq 400 ]; then
	    echo "${FSLDIR}/bin/bedpostx_single_slice.sh $subjdir $nfibres $fudge $burnin $slice" \
	      >> ${subjdir}.bedpostX/commands.txt
	elif [ $argorder -eq 402 ]; then
	    echo "${FSLDIR}/bin/bedpostx_single_slice.sh $subjdir $nfibres $fudge $burnin $njumps $sampleevery $slice" \
	      >> ${subjdir}.bedpostX/commands.txt
	elif [ $argorder -eq 415 ]; then
	    echo "${FSLDIR}/bin/bedpostx_single_slice.sh $subjdir $nfibres $fudge $burnin $njumps $sampleevery $model $slice" \
	      >> ${subjdir}.bedpostX/commands.txt
	elif [ $argorder -eq 419 ]; then
	    echo "${FSLDIR}/bin/bedpostx_single_slice.sh $subjdir $slice $opts" \
	      >> ${subjdir}.bedpostX/commands.txt
	fi
    fi
    slice=$(($slice + 1))
done

bedpostid=`${BPDIR}/fsl_sub_mgh -j $preprocid -l ${subjdir}.bedpostX/logs -m a -N bedpostx -t ${subjdir}.bedpostX/commands.txt`

echo Queuing post processing stage
mergeid=`${BPDIR}/fsl_sub_mgh -j $bedpostid -T 60 -m ae -N bedpostx_post -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_postproc.sh $subjdir`

[ "x$SGE_ROOT" = "x" ] && [ $dopbsjobs -eq 0 ] && kill $monitorpid

if [ "x$SGE_ROOT" != "x" ]; then
    echo
    echo Type ${subjdir}.bedpostX/monitor to show progress.
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
finished=0
logdir=${subjdir}.bedpostX/logs
while [ \$finished -eq 0 ] ; do
    nfin=0
    slice=0
    while [ "\$slice" -le $nslices ];do
        slicezp=\`\$FSLDIR/bin/zeropad \$slice 4\`
        isimg=\`\$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_\$slicezp/dyads1\`
        if [ \$isimg -eq 1 ];then
          nfin=\$((\$nfin + 1))
        fi
        slice=\$((\$slice + 1))
    done
    echo "\$nfin slices processed"

    if [ -f ${subjdir}.bedpostX/xfms/eye.mat ] ; then
        finished=1
        echo "All slices processed"
    fi

    sleep 600;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor

    echo Type ${subjdir}.bedpostX/cancel to terminate all the queued tasks.
    cat <<EOC > ${subjdir}.bedpostX/cancel
#!/bin/sh
qdel $mergeid $bedpostid $preprocid
EOC
    chmod +x ${subjdir}.bedpostX/cancel

    echo
    echo You will get an email at the end of the post-processing stage.
    echo
elif [ $dopbsjobs -eq 1 ] ; then
    echo
    echo Type ${subjdir}.bedpostX/monitor on `hostname` to show progress.
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
finished=0
logdir=${subjdir}.bedpostX/logs
while [ \$finished -eq 0 ] ; do
    nfin=0
    for job in \`cat \$logdir/joblist | awk '{print \$2}'\` ; do
        status=\`jobinfo \$job | grep Exit | awk '{print \$3}'\`
        if [ "\$status" -eq 0 ] ; then let nfin=nfin+1; fi
    done
    if [ \$nfin -eq $nslices ] ; then
        finished=1
    fi

    echo "\$nfin of $nslices slices processed"
    sleep 600;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor

    echo Type ${subjdir}.bedpostX/cputime on `hostname` to show CPU time of completed jobs.
    cat <<EOT > ${subjdir}.bedpostX/cputime
#!/bin/sh
logdir=${subjdir}.bedpostX/logs
for jobname in \`cat \$logdir/joblist | awk '{print \$1}' | sort\` ; do
    jobid=\`grep \$jobname \$logdir/joblist | awk '{print \$2}'\`
    jobtime=\`jobinfo \$jobid | grep Cputime | awk '{print \$2}'\`
    if [ "\${jobtime}x" != "x" ]; then
        echo "\$jobname \$jobtime"
    fi
done
EOT
    chmod +x ${subjdir}.bedpostX/cputime

    echo Type ${subjdir}.bedpostX/cancel on `hostname` to terminate all the queued tasks.
    cat <<EOC > ${subjdir}.bedpostX/cancel
#!/bin/sh
logdir=${subjdir}.bedpostX/logs
qdel $mergeid \`sort -r \$logdir/joblist | awk '{printf \$2 " "}'\` $preprocid
EOC
    chmod +x ${subjdir}.bedpostX/cancel

    echo
    echo You will get an email at the end of the post-processing stage.
    echo
fi

# Process multiple input directories, queue them up serially (AY)
done

